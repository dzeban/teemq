#!/usr/bin/env python3

import sys
import argparse
import logging
import threading
import queue

from kombu import Connection, Exchange, Queue

logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s: [%(name)s]: %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S')

class Sender(threading.Thread):
    def __init__(self, opts, pipe, *args, **kwargs):
        self.logger = logging.getLogger('Sender')
        urls = opts.url
        self.connection = Connection(urls)

        max_length = None
        if opts.max_length != 0:
            max_length = opts.max_length

        self.queue = Queue(
            opts.queue,
            Exchange(opts.exchange),
            routing_key=opts.key,
            max_length=max_length
        )

        self.producer = self.connection.Producer()
        self.pipe = pipe
        self.stopping = False
        self.declare = opts.declare
        super().__init__(*args, **kwargs)

    def publish(self, message):
        self.producer.publish(
            message,
            retry=True,
            exchange=self.queue.exchange,
            routing_key=self.queue.routing_key,
            declare=[self.queue] if self.declare else []
        )

    def run(self):
        while True:
            if self.stopping:
                self.logger.info('Stopping sender')
                break

            try:
                item = self.pipe.get(timeout=1)
                self.publish(item)
            except queue.Empty:
                pass

    def stop(self):
        self.stopping = True


def tee(args, pipe):
    logger = logging.getLogger('Tee')
    ratelimit = False

    while True:
        try:
            for line in sys.stdin:
                sys.stdout.write(line)
                try:
                    if pipe.empty():
                        ratelimit = False

                    pipe.put(line, block=False)
                except queue.Full:
                    if not ratelimit:
                        logger.warning('Dropping line because QUEUE IS FULL')
                        ratelimit = True

            break # EOF
        except UnicodeDecodeError:
            logger.warning('Non-unicode input. Skipping...')
        except KeyboardInterrupt:
            break

    logger.info('No more input, exiting')

def main():
    parser = argparse.ArgumentParser(description='Write stdin to stdout and publish to AMQP broker')
    parser.add_argument('--url', '-u', default='amqp://guest:guest@localhost:5672',
                                       help='AMQP URL. May be a list delimited by ";"')
    parser.add_argument('--exchange', '-e', required=True, help='AMQP exchange name')
    parser.add_argument('--queue', '-q', required=True, help='AMQP queue name')
    parser.add_argument('--declare', '-d', action='store_true', help='Declare AMQP queues?')
    parser.add_argument('--key', '-k', required=True, help='AMQP Routing key')
    parser.add_argument('--limit', '-l', default=100000, type=int, help='Sender queue size limit (default 100000)')
    parser.add_argument('--max-length', '-m', default=0, type=int, help='AMQP queue max length (default is unlimited')
    args = parser.parse_args()

    # This queue is used as buffered pipe
    # for queueing messages between the main
    # thread and the sender
    pipe = queue.Queue(maxsize=args.limit)

    # Start sender
    sender = Sender(args, pipe)
    sender.start()

    tee(args, pipe)

    sender.stop()
    sender.join()

if __name__ == '__main__':
    main()
